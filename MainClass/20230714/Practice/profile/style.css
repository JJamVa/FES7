/* 2번째 순서로서 초기값을 할당해야한다. 초기값을 두기 위해서는 맨위에 쓰는 것을 권장한다. */
/* type-selector를 의도적으로 쓴다. */
h1,
p {
    margin: initial;
    /* 브라우저에서 제공하는 초기 값을 넣어준다. */
}

/* 타입 selector  -> 광범위한 selector 구체적이지 않다.*/
body {
    background-image: url(images/background.gif);
}

div {
    /* 부모가 제공해주는 컨텐츠 영역의 크기 */
    width: 800px;
    /* 원래 초기값은 auto */
    /* 초기값 initial value */

    /* width auto와 100%의 차이 */
    /* %는 컨테이너 블록의 너비 백분율 */

    /* margin-left: auto; */
    margin: 0 auto;
    /* margin-left에서 대여받은 공간에서 div의 사용한 태그를 제외하고 남은 공간을 margin 값으로 사용 할 수 있다. */
    /* margin을 통해 auto, %랑 다른 것을 볼 수 있다. */
    /* auto는 그 만큼 값을 뺀다.  %는 width는 유지하고 밀어낸다. */
    /* %는 margin, padding의 값들을 추가하는 것과 같다. */

    /* display 초기값은 inline*/
    /* 브라우저 개발자들이 각각의 개발 홈페이지에 따라 block으로 처리한다.*/
}

.wrapper{
    background-color: #fff;
    width: 800px;
    height: auto;
    /* 작성하지 않아도 height는 auto이다. */
    margin: 100px auto;
}

*.header {
    background-image: url(images/cover05.png);
    background-size: cover;
    background-position: center;
    padding: 100px 0;
}

img{
    display: block;
    margin: 0 auto;
    /* img 태그는 inline 요소라 불가능하다. 공백 공간은 다음 요소의 것이다. */
}

/* header인 class이름들 class의 이름은 숫자로 시작할 수 없다.*/

/* descendent 태그 */
.header h1{
    text-align: center;
    /* 컨텐츠만 가운데로 가는 것. */

    /* width: auto;
    margin: 0 auto; */
    /* 위와 같은 문법은 block요소에 대하여 빈 공간이 없어서 동작하지 않는다. */
}

.header p{
    border-top: 4px solid white;
    color: white;
    background-color: goldenrod;
    width: fit-content;
    padding: 0 20px;
    margin: 0 auto;
}

.footer {
    background-color: #f4f4f4;
}